QUICK-SORT
#include<stdio.h>
void quicksort(int number[25],int first,int last){
int i, j, pivot, temp;
if(first<last){
pivot=first;
i=first;
j=last;
while(i<j){
while(number[i]<=number[pivot]&&i<last)
i++;
while(number[j]>number[pivot])
j--;
if(i<j){
temp=number[i];
number[i]=number[j];
number[j]=temp;
}
}
temp=number[pivot];
number[pivot]=number[j];
number[j]=temp;
quicksort(number,first,j-1);
quicksort(number,j+1,last);
}
}
int main(){
int i, count, number[25];
printf("How many elements are u going to enter?: ");
scanf("%d",&count);
printf("Enter %d elements: ", count);
for(i=0;i<count;i++)
scanf("%d",&number[i]);
quicksort(number,0,count-1);
printf("Order of Sorted elements: ");
for(i=0;i<count;i++)
printf(" %d",number[i]);
return 0;
}
----------------------------------------------------------------------------


BINARY SEARCH
# include<stdio.h> 
# include<conio.h> 
void LINEAR_SEARCH(int a[10], int n, int key) 
{ 
int i,found=0; 
for(i=0;i<n;i++) 
{ 
if(key==a[i]) 
{ 
printf("\n %d found at a[%d]",key,i); 
found=1; 
break; 
} 
} 
if(found==0) 
printf("\n Element not found in the list"); 
} 
void BINARY_SEARCH(int a[10], int key, int first, int last) 
{ 
int mid; 
mid=(first+last)/2; 
if(key < a[mid]) 
BINARY_SEARCH(a,key,first,mid-1); 
else if(key > a[mid]) 
BINARY_SEARCH(a,key,mid+1,last); 
else 
printf("\n %d found at a[%d]",key,mid); 
} 
void DISPLAY_ARRAY(int a[10],int n) 
{ 
int i; 
printf("\n Given array : "); 
for(i=0;i<n;i++) 
{ 
printf("%3d",a[i]); 
} 
} 
void main() 
{ 
int a[8] = {4,7,3,2,1,7,9,0}; 
int sa[8] = {0,1,2,3,4,7,7,9}; 
int n=8; 
int key=7; 
int choice; 
clrscr(); 
printf("\n 1. Linear Search"); 
printf("\n 2. Binary Search"); 
printf("\n Enter your choice :"); 
scanf("%d",&choice); 
switch(choice) 
{ 
case 1 : { 
DISPLAY_ARRAY(a,n); 
LINEAR_SEARCH(a,n,key); 
break; 
} 
case 2 : { 
DISPLAY_ARRAY(sa,n); 
BINARY_SEARCH(sa,key,0,n-1); 
break; 
} 
default : printf("\n Invalid choice "); 
} 
getch();}
--------------------------------------------------------------------------------------------------------------------------
// 6. Write a program to push 5,9,34,17,32 into stack and pop 3 times 
// from the stack, also display the popped numbers
# include<stdio.h> 
# include<conio.h> 
# define MAX 5 
int STACK[MAX]; 
int TOP=-1; 
void DISPLAY(); 
void PUSH(int item) 
{ 
if(TOP==MAX-1) 
{ 
printf("\n STACK Overflow"); 
} 
else 
{ 
printf("\n ** PUSH %d **",item); 
TOP=TOP+1; 
STACK[TOP]=item; 
DISPLAY(); 
} 
} 
void POP() 
{ 
if(TOP==-1) 
{ 
printf("\n STACK Underflow"); 
getch(); 
} 
else 
{ 
printf("\n ** %d POPED **",STACK[TOP]); 
TOP=TOP-1; 
DISPLAY(); 
} 
} 
void DISPLAY() 
{ 
int i; 
for(i=TOP;i>=0;i--) 
{ 
printf("\n STACK[%d]=%d",i,STACK[i]); 
} 
getch(); 
} 
void main() 
{ 
int i; 
clrscr(); 
printf("\n PUSH 5,9,34,17,32\n"); 
PUSH(5); 
PUSH(9); 
PUSH(34); 
PUSH(17); 
PUSH(32); 
printf("\n POP 3 elements\n"); 
POP(); 
POP(); 
POP(); 
}

------------------------------------------------------------------------------------------------------------
//reversing string

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Stack {
 int top;
 unsigned capacity;
 char* array;
};
struct Stack* createStack(unsigned capacity)
{
 struct Stack* stack
 = (struct Stack*)malloc(sizeof(struct Stack));
 stack->capacity = capacity;
 stack->top = -1;
 stack->array
 = (char*)malloc(stack->capacity * sizeof(char));
 return stack;
}
int isFull(struct Stack* stack)
{
 return stack->top == stack->capacity - 1;
}
int isEmpty(struct Stack* stack)
{
 return stack->top == -1;
}
void push(struct Stack* stack, char item)
{
 if (isFull(stack))
 return;
 stack->array[++stack->top] = item;
}
char pop(struct Stack* stack)
{
if (isEmpty(stack))
 return INT_MIN;
 return stack->array[stack->top--];
}
void reverse(char str[])
{
 int n = strlen(str);
 struct Stack* stack = createStack(n);
 int i;
 for (i = 0; i < n; i++)
 push(stack, str[i]);
 for (i = 0; i < n; i++)
 str[i] = pop(stack);
}
int main()
{
 char str[] = "community college";
 reverse(str);
 printf("Reversed string is %s", str);
 return 0;
}

----------------------------------------------------------------------------------------------------------
// 3. Perform the merge sort on the input {75,8,1,16,48,3,7,0}
// display the output in descending order
#include <stdio.h>
int main() {
 int size1, size2, size3;
 printf("\nEnter the size for the first array: ");
 scanf("%d", & size1);
 printf("\nEnter the size for the second array: ");
scanf("%d", & size2);
 size3 = size1 + size2;
 printf("\nEnter the elements :");
 /*Array Declaration*/
 int array1[size1], array2[size2], array3[size3];
 /*Array Initialized*/
 for (int i = 0; i < size1; i++) {
 scanf("%d", & array1[i]);
 array3[i] = array1[i];
 }
 int k = size1;
 printf("\nEnter the elements:");
 /*Array Initialized*/
 for (int i = 0; i < size2; i++) {
 scanf("%d", & array2[i]);
 array3[k] = array2[i];
 k++;
 }
 printf("\nmerged array of first and second:\n");
 for (int i = 0; i < size3; i++)
 /*Printing the merged array*/
 printf("%d ", array3[i]);
 printf("\nsorted array in descending order\n");
 /*Sorting Array*/
 for (int i = 0; i < size3; i++) {
 int temp;
 for (int j = i + 1; j < size3; j++) {
 if (array3[i] < array3[j]) {
 temp = array3[i];
 array3[i] = array3[j];
 array3[j] = temp;
 }
 }
 }
 /*Printing the sorted Array*/
 for (int i = 0; i < size3; i++) {
 printf(" %d ", array3[i]);
}
 return 0;
}

-----------------------------------------------------------------------------------
//odd even

#include<stdio.h>
 void odd();
 void even();
int num=1;   
    void odd()
    {
        if(num<=10)
        {
            printf("%d",num+1);
            num++;
            even();
        }
        return;
    }
    void even()
    {
        if(num<=10)
        {
            printf("%d",num-1);
            num++;
            odd();
        }
        return;
    }
int main()
{
    // int n;
    //  printf("enter the number:");
    // scanf("%d",&n);
    odd();
return 0;
}
------------------------------------------------------------------------------------------------------
//11. Write a program to evaluate a postfix expression 5 3+8 2 - *.
#include<stdio.h>
int stack[20];
int top = -1;
void push(int x)
{
 stack[++top] = x;
}
int pop()
{
 return stack[top--];
}
int main()
{
 char exp[20];
 char *e;
 int n1,n2,n3,num;
 printf("Enter the expression :: ");
 scanf("%s",exp);
 e = exp;
 while(*e != '\0')
 {
 if(isdigit(*e))
 {
 num = *e - 48;
 push(num);
 }
 else
 {
 n1 = pop();
 n2 = pop();
 switch(*e)
 {
 case '+':
 {
 n3 = n1 + n2;
 break;
 }
 case '-':
 {
 n3 = n2 - n1;
 break;
 }
 case '*':
 {
 n3 = n1 * n2;
 break;
 }
 case '/':
 {
 n3 = n2 / n1;
 break;
 }
 }
 push(n3);
 }
 e++;
 }
 printf("\nThe result of expression %s = %d\n\n",exp,pop());
 return 0;
}
----------------------------------------------------------------------------------------------------------
// 14. Write a program to sort elements using heap sort in { 
// 9,16,32,8,4,1,5,8,0).
#include <stdio.h> 
void heapify(int a[], int n, int i) 
{ 
 int largest = i; // Initialize largest as root 
 int left = 2 * i + 1; // left child 
 int right = 2 * i + 2; // right child 
 if (left < n && a[left] > a[largest]) 
 largest = left; 
 if (right < n && a[right] > a[largest]) 
 largest = right; 
 if (largest != i) { 
 int temp = a[i]; 
 a[i] = a[largest]; 
 a[largest] = temp; 
 heapify(a, n, largest); 
 } 
} 
void heapSort(int a[], int n) 
{ 
 for (int i = n / 2 - 1; i >= 0; i--) 
 heapify(a, n, i); 
 for (int i = n - 1; i >= 0; i--) { 
 int temp = a[0]; 
 a[0] = a[i]; 
 a[i] = temp; 
 heapify(a, i, 0); 
 } 
} 
void printArr(int arr[], int n) 
{ 
     for (int i = 0; i < n; ++i) 
 { 
 printf("%d", arr[i]); 
 printf(" "); 
 } 
} 
int main() 
{ 
 int a[] = {9,16,32,8,4,1,5,8,0}; 
 int n = sizeof(a) / sizeof(a[0]); 
 printf("Before sorting array elements are - \n"); 
 printArr(a, n); 
 heapSort(a, n); 
 printf("\nAfter sorting array elements are - \n"); 
 printArr(a, n); 
 return 0; 
}



15. Write a program to display the Fibonacci series
#include<stdio.h>
int fib(int i)
{
  if(i==0)
  {
    return 0;
  
  }

  if(i==1)
  {
    return 1;
  }
  return fib(i-1)+fib(i-2);
}
int main()
{
  int i,n;
  printf("enter the n value:");
  scanf("%d",&n);
  for(i=0;i<=n;i++)
  {
    printf("%d\t",fib(i));
  }
  return 0;
}

17. Write a program to display the factorial of a number
#include<stdio.h>
unsigned long  fact(int n)
{
    if (n<1)
    {
        return 1;
    }
    return n* fact(n-1);
}
int main()
{
    int n;
    printf("enter the number: ");
    scanf("%d",&n);
    printf("The factorial of %d is %lu",n,fact(n));
    return 0;
}
--------------------------------------------------------------------------------------------

TOWER 
#include<stdio.h>
toh(int n, char source, char destination,char helper)
{
    if(n==0)
    {
        return 0;
    }
    toh(n-1,source,helper,destination);
    printf("\n move dic %d from tower  %c to tower %c",n,source,destination);
    toh(n-1,helper,destination,source);
}
int main()
{
    toh(3,'A','B','C');
    return 0;
}
___________________________________________________________________________________________
BUBBLE sort


#include<stdio.h>
void bubble_sort(int arr[],int pass)
{
int i,j;
  for ( i= 0;i<pass-1; i++)
  {
   for(j=0;j < pass-i-1;j++)
   {
    if(arr[j]>arr[j+1])
    {
      int temp =arr[j];
      arr[i]=arr[j+1];
      arr[j+1]=temp;
    } 
   }
  } 
}
int main()
{
  int arr[]={64, 34, 25, 12, 22, 11, 90};
  int pass=sizeof(arr)/sizeof(arr[0]);
  bubble_sort(arr,pass);
  printf("unSorted array: 64 34 25 12 22 11 90 ");
  printf("\n sorted arry is:");
  for(int i=0;i<pass;i++)
  {
    printf("%d ",arr[i]);
  }
  return 0;
}
